{"meta":{"title":"PJunhyuk-blog","subtitle":"박준혁의 개발 블로그","description":null,"author":"PJunhyuk","url":"https://PJunhyuk.github.io/blog"},"pages":[],"posts":[{"title":"anaconda 를 통해 python 2, 3 환경 모두 관리하기","slug":"anaconda-를-통해-python-2-3-환경-모두-관리하기","date":"2018-03-05T08:07:46.000Z","updated":"2018-03-05T08:08:35.012Z","comments":true,"path":"2018/03/05/anaconda-를-통해-python-2-3-환경-모두-관리하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/03/05/anaconda-를-통해-python-2-3-환경-모두-관리하기/","excerpt":"","text":"python 2.7 실행anaconda는 여러 version의 python을 관리할 수 있게 해주는 툴입니다. python을 사용하다보면, 기본적으로 설치된 python 이외에 다른 version의 python을 사용해야 할 경우가 꽤 있습니다. 예를 들어, 제가 최근 보고 있는 charades-algorithms 코드 역시 python 2.7 version에서 구현되었습니다. 이를 활용하기 위해서는, anaconda를 사용하여 다른 version의 python 환경을 생성하고, 그에 접근해야 합니다. 먼저, 윈도우 프롬포트에서 conda 명령어를 바로 사용하기 위해, 환경변수의 Path에 conda의 경로를 넣어줍시다. 환경변수의 Path는 내 PC &gt; 우클릭 &gt; 속성 &gt; 고급 시스템 설정 &gt; 환경 변수 &gt; 시스템 변수 &gt; Path &gt; 편집 &gt; 새로 만들기 에서 추가할 수 있으며, 저의 경우에는 C:\\Users\\MCML-PJunhyuk-LabDT\\Anaconda3\\Scripts가 그 경로였습니다. 그 다음, 윈도우 프롬포트를 실행하여 다음의 명령어를 입력합니다. 1&gt; conda create -n py27 python=2.7 anaconda conda를 이용하여 새로운 환경을 생성하며, 그 이름은 py27, python 버전은 2.7이라는 것을 의미합니다. 이렇게 생성한 환경의 리스트는 다음의 명령어로 확인할 수 있습니다. 1&gt; conda info --envs 이제는 생성한 Python 2.7 환경을 사용해봅시다. 먼저 Anaconda Prompt 를 실행합니다. 커맨드 라인 앞의 괄호 안에 들어 있는 것이 현재 활성화된 환경입니다.앞서 제작한 환경의 이름이 py27이었으므로, 다음의 명령어를 통해 그 환경에 접근합니다. 12(base) &gt; conda activate py27(py27) &gt; 그러면 괄호 안이 py27로 바뀌는 것을 확인하실 수 있습니다. 다음의 명령어를 통해 해당 환경의 python version을 확인해봅시다. 12(py27) &gt; python --versionPython 2.7.14 :: Anaconda. Inc. 우리가 원하는대로 실행되었습니다! References파이썬 아나콘다 Python3, Python2 동시 설치(다중 커널) :)Anaconda 설치하기 - Python을 제대로 활용해보자","categories":[],"tags":[]},{"title":"윈도우10에 pytorch 설치하기","slug":"윈도우10에-pytorch-설치하기","date":"2018-03-05T05:16:21.000Z","updated":"2018-03-05T08:08:42.153Z","comments":true,"path":"2018/03/05/윈도우10에-pytorch-설치하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/03/05/윈도우10에-pytorch-설치하기/","excerpt":"","text":"윈도우에 pytorch를 설치해봅시다! pytorch 란?pytorch는 머신러닝 프레임워크 중 하나입니다. python 형식입니다. pytorch 윈도우 설치pytorch는 공식적으로 linux와 macOS 환경만 지원하기 때문에, 윈도우에 설치하기 위해서는 anaconda와, 어떤 개발자가 구현해놓은 것을 사용해야 합니다. anaconda prompt를 관리자 권한으로 실행시켜, 다음의 명령어를 입력합니다. 1(base) &gt; conda install -c peterjc123 pytorch 그러면 pytorch가 설치됩니다. 확인pytorch가 정상적으로 설치되었는지, 그리고 CUDA를 통해 GPU를 사용할 수 있는지를 체크하기 위해서는 다음의 명령어를 anaconda prompt에 실행해봅니다. 12345678910(base) &gt; python&gt;&gt;&gt; import torch&gt;&gt;&gt; torch.cuda.current_device()0&gt;&gt;&gt; torch.cuda.device(0)&lt;torch.cuda.device at 0x000002299E83B780&gt;&gt;&gt;&gt; torch.cuda.device_count()1&gt;&gt;&gt; torch.cuda.get_device_name(0)&apos;GeForce GTX 1080 Ti&apos; 정상적으로 GPU가 detect 된 모습을 확인할 수 있습니다! References윈도우 10 PyTorch 환경 구성 - 설치How to check your pytorch / keras is using the GPU?","categories":[],"tags":[]},{"title":"윈도우에서 쉘 스크립트 사용하기","slug":"윈도우에서-쉘-스크립트-사용하기","date":"2018-02-14T09:43:10.000Z","updated":"2018-03-05T05:14:16.137Z","comments":true,"path":"2018/02/14/윈도우에서-쉘-스크립트-사용하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/02/14/윈도우에서-쉘-스크립트-사용하기/","excerpt":"","text":"윈도우에서 쉘 스크립트를 사용해봅시다! 원래 윈도우 터미널에서는 bash 명령어가 적용되지 않았습니다. 이는 맥북을 주로 쓰고, linux에서 코드를 돌리는 저에겐 굉장히 불편했는데요!(비교적 최근에) 윈도우에서도 bash 를 사용할 수 있는 WSL이 나왔다고 합니다.WSL을 설치하면 윈도우 터미널에서 bash 명령어를 입력하여 bash 명령어가 입력 가능한 창으로 들어가게 됩니다. 다만, 아직 WSL에서 윈도우의 GPU에 접근하는게 불가능하다고 합니다.때문에 굉장히 기본적인 명령어들, 예를 들어 data나 model을 다운로드 받는 스크립트 정도만 WSL로 돌리고, 나머지는 그냥 윈도우에서 돌리는 방식으로 작업 방식을 구축하기로 하였습니다. 먼저, WSL은 검색을 통해 설치할 수 있습니다. 제가 참고한 블로그는 다음과 같습니다. [Windows 10/윈도우 10] WSL Windows 10 Bash 사용하기(lxrun) 그 다음 터미널에서 &gt; bash 를 입력하면 WSL에 접근할 수 있습니다. 기본적인 Python 코드를 사용하기 위해, python과 python3, pip를 설치해주었습니다. 12345&gt; bash$ sudo apt-get update$ sudo apt-get install python3$ sudo apt-get install python$ sudo apt-get install python-pip 예시: DALY dataset 다운로드","categories":[],"tags":[]},{"title":"윈도우10에 tensorflow-gpu 작업 환경 세팅하기","slug":"윈도우10에-tensorflow-gpu-작업-환경-세팅하기","date":"2018-02-07T04:36:45.000Z","updated":"2018-02-07T05:27:01.184Z","comments":true,"path":"2018/02/07/윈도우10에-tensorflow-gpu-작업-환경-세팅하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/02/07/윈도우10에-tensorflow-gpu-작업-환경-세팅하기/","excerpt":"","text":"윈도우10 컴퓨터에 tensorflow-gpu 를 설치해봅시다. CUDA Toolkit 9.0 + cuDNN 7.0.5 + Python 3.6.4 + TensorFlow 1.5.0 Environment: Windows 10 Home + Inter(R) Core(TM) i7-8700K CPU @ 3.70GHz 3.70 GHz + NVIDIA GeForce GTX 1080 Ti CUDA Toolkit 9.0 설치현재(2018년 2월 7일) 기준 CUDA Toolkit의 가장 최신 버전은 9.1입니다. 그러나 테스트해보니 latest version의 tensorflow가 CUDA Toolkit 9.1을 지원하지 않는 것 같아, 9.1을 설치했다가 삭제 후 9.0을 설치하였습니다ㅠㅠ삭제는 그냥 제어판에서 NVIDIA가 들어가는 것을 (그래픽카드 드라이버 빼고) 다 날려줬습니다. 중간에 한 번 재시작하라고 하는데, 말을 잘 들어줍시다. 중간에 화면이 이상해지거나, 클릭이 안되는 현상이 발생할 수도 있지만, 무시하고 기다리면 될 것 같습니다. 여튼 설치를 위해, CUDA Toolkit 9.0 설치 페이지에서 Windows - x86-64 - 10 - exe (local) 을 차례로 선택하여 Installer를 다운로드 받습니다.다운로드 후 쭉 클릭하여 설치를 완료해줍니다. 설치 완료 후 cmd 창에 nvcc --version 을 입력하여 정상 설치를 체크해봅니다. 여러 줄이 뜨고, 마지막 줄에 release 9.0 이 뜨면 정상입니다. cuDNN 설치cuDNN Download 페이지에 가면, 여러 버전 중 원하는 것을 선택할 수 있습니다. (로그인이 필요합니다!) CUDA Toolkit을 9.0 버전으로 설치하였으니, Download cuDNN v7.0.5 for CUDA 9.0 을 클릭하고, cuDNN v7.0.5 for Windows 10 을 클릭하여 다운로드 받습니다.다운로드가 완료되면, 압축을 풉니다. 내부에 있는 bin, include, lib 폴더를 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.0 의 경로에 덮어써줍니다. Python 설치Python을 설치해봅시다. Python 공식 홈페이지 에서 다운로드 받으면 됩니다.이 때, 제 컴퓨터는 64비트이고, 32비트의 Python이 돌아가는데 에러가 나서, 64비트의 Python을 설치하였습니다. release에서 원하는 버전을 선택하고, 페이지 하단의 Files에서 Windows x86-64 executable installer 을 다운로드 받아서 설치하면 됩니다.저는 3.6.4 버전을 설치하였습니다. 설치 완료 후 cmd 창에 python --version 을 입력하여 정상 설치를 체크해봅니다. Python 3.6.4라는 내용이 뜨면 정상입니다. tensorflow-gpu 설치Python과 함께 설치된 pip를 활용하여 tensorflow-gpu를 설치해봅시다. cmd 창에서 pip install tensorflow-gpu를 입력하면 설치가 진행됩니다. 설치 완료 후 cmd 창에 다음의 명령어를 통해 정상 작동을 체크해봅니다. 12345678910python&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; hello = tf.constant(&apos;Hello, TF!&apos;)&gt;&gt;&gt; sess = tf.Session()&gt;&gt;&gt; sess.run(hello)b&apos;Hello, TF!&apos;&gt;&gt;&gt; a = tf.constant(10)&gt;&gt;&gt; b = tf.constant(32)&gt;&gt;&gt; sess.run(a + b)42 실행해보니, &gt;&gt;&gt; sess = tf.Session() 명령어 입력 후 조금 텀이 존재하였습니다. 아무튼 위의 명령어들이 잘 작동한다면 제대로 설치된 것입니다! References1-2. 텐서플로우(TensorFlow) GPU버전(Tensorflow-Gpu) 설치하기TensorFlow GPU 설치 (Windows 10, Python 3.6)","categories":[],"tags":[]},{"title":"Hexo에 hueman 테마 적용하기","slug":"Hexo에-hueman-테마-적용하기","date":"2018-01-12T02:24:03.000Z","updated":"2018-01-12T06:44:09.731Z","comments":true,"path":"2018/01/12/Hexo에-hueman-테마-적용하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/01/12/Hexo에-hueman-테마-적용하기/","excerpt":"","text":"이번에는 앞서 Hexo로 제작한 GitHub Pages의 Blog에 hueman이라는 플러그인을 적용해봅시다. hueman이란? A redesign of Alx’s wordpress theme hueman, ported to Hexo.Probably the most beautiful theme for Hexo. hueman은 Hexo 기반의 blog theme 입니다. 다음의 링크에서 Preview를 확인해보실 수 있습니다.hueman-preview 설치앞서 Hexo blog를 설치해놓았던 blog 디렉토리에서 다음의 명령어를 입력합니다. Heuman 테마를 clone 하는 과정입니다. 1$ git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman 그 후 blog 폴더의 _config.yml 에서 theme를 landscape가 아닌 hueman으로 수정합니다. 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hueman 다음으로 themes/hueman 폴더에 있는 _config.yml.example 파일의 이름을 _config.yml로 바꿔줍니다.마지막으로 Insight Search 엔진을 사용하기 위해 npm으로 hexo-generator-json-content 패키지를 설치합니다. 1$ npm install -S hexo-generator-json-content 설치가 완료되었습니다! 변경 사항을 다음의 명령어를 통해 GitHub에 업로드합니다. 123$ git add *$ git commit -m &quot;Install hueman&quot;$ git push origin master 재배포테마 설치 완료 후에는 Hexo를 재배포해야 합니다. 123$ hexo clean$ hexo g$ hexo d 처음에는 좀 깨져 보일 수 있는데, (css 로딩이 늦어서 그런 것 같습니다) 한 5분 정도 기다린 후 새로고침하니 잘 되는 것을 확인할 수 있었습니다.끝입니다! 이젠 Hexo의 hueman 테마가 적용된 블로그를 커스터마이징 할 수 있습니다. ReferencesHexo 테마 적용하기Hexo 추천 테마, Hueman 적용하기","categories":[],"tags":[]},{"title":"Hexo로 GitHub Pages에 Blog 설치","slug":"Hexo로-GitHub-Pages에-Blog-설치","date":"2018-01-12T01:36:54.000Z","updated":"2018-01-12T06:50:30.962Z","comments":true,"path":"2018/01/12/Hexo로-GitHub-Pages에-Blog-설치/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/01/12/Hexo로-GitHub-Pages에-Blog-설치/","excerpt":"","text":"GitHub Pages에 Hexo를 설치해봅시다. Hexo란?Hexo는 Node.js 기반의 블로그 프레임워크입니다. Hexo 공식 소개를 살펴보면 Hexo가 무엇인지 쉽게 알 수 있습니다. Hexo is a fast, simple &amp; powerful blog framework powered by Node.js. DependenciesNode.js &amp; npmHexo를 설치하기 위해서는 Node.js가 설치되어야 있어야 합니다.맥에 Node.js를 설치하는 방법은 여러 가지가 있습니다. 가장 쉬운 방법은 Node.js 사이트에서 공식 설치 파일을 받는 것이지만, 이는 다음과 같은 문제가 있다고 합니다. 관리자 권한 없이 제대로 실행되지 않음. Node.js의 여러 버전을 관리할 수 없어, 서로 다른 버전을 사용하는 여러 프로젝트를 동시에 테스트하기 어려움. 때문에 homebrew나, nvm(Node Version Manager) 등을 사용하여 Node.js를 설치하곤 합니다.그러나 저는 위의 두 방법 모두 이상한 에러가 떠서, 기존 파일을 모두 삭제 후 공식 설치 파일을 통해 설치를 진행하였습니다ㅎㅎ;공식 설치 파일을 사용하여 Node.js와 npm을 모두 설치해줍시다. ReferencesMac에서 Node.js 설치하기 ETC손쉬운 설치를 위해 hexo 관련 몇몇 npm 패키지를 설치하여야 합니다. 1$ npm install hexo-cli -g 설치Hexo 설치Hexo를 사용하여 개인/팀 블로그를 설치해보도록 하겠습니다. 원하는 그림은 https://&lt;개인/팀계정&gt;.github.io/blog 에 Hexo blog가 설치되는 것입니다.workspace 폴더에서 다음의 명령어를 실행합니다. 1$ hexo init blog 그러면 폴더 내부에 blog라는 폴더가 생성됩니다. node modules 설치를 진행합니다. 12$ cd blog$ npm install 기본적인 Hexo 설치가 완료되었습니다! GitHub 세팅GitHub Pages 사용을 위해서는 위에서 사용한 개인/팀의 계정에 blog라는 repository를 만들어야 합니다. GitHub 사이트에 접속하여 New를 누르고, blog라는 이름의 repository를 만들어줍시다. 이 때 README.md나 .gitignore과 같은 파일은 생성하지 않습니다.이제 앞서 설치해놓은 Hexo를 GitHub repository에 업로드해야합니다. blog 폴더로 이동하여 다음의 명령어를 입력합니다. 12345$ git init$ git remote add origin https://github.com/virus-lab/blog.git$ git add *$ git commit -m &quot;Initiate Hexo&quot;$ git push origin master GitHub의 repository로 이동하면 잘 업로드 된 것을 확인할 수 있습니다. 웹 상에서 dependencies 에러 메세지가 나오면 Dismiss - Risk is tolerable to this project 를 선택합시다. 배포 준비GitHub Pages에 배포하기 위해 blog 디렉토리의 _config.yml 파일을 수정합니다.위의 URL 부분은 다음과 같이 수정합니다. 123456# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://&lt;개인/팀계정&gt;.github.io/blogroot: /blog/permalink: :year/:month/:day/:title/permalink_defaults: 아래 Deployment 부분은 다음과 같이 추가 및 수정합니다. 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/&lt;개인/팀계정&gt;/blog.git branch: gh-pages 배포먼저 다음의 명령어를 통해 deployment(배포) 패키지를 설치합니다. 1$ npm install hexo-deployer-git --save 다음의 명령어를 통해 repository를 clean 한 후 배포합니다. g와 d는 각각 generate와 deploy의 약자입니다. 123$ hexo clean$ hexo g$ hexo d 끝입니다!GitHub 웹의 repository에서 branch를 gh-pages로 수정한 후 보면 방금 한 것들이 commit 되어 있는 것을 확인할 수 있습니다. 이제 https://&lt;개인/팀계정&gt;.github.io/blog 의 링크에 블로그가 설치된 것을 확인하실 수 있습니다! GitHub 재업로드설치가 완료되었습니다! 변경 사항을 다음의 명령어를 통해 GitHub에 업로드합니다. 123$ git add *$ git commit -m &quot;Install hueman&quot;$ git push origin master SourceTree 적용SourceTree를 사용하여 Hexo 프로젝트를 관리하기 위해서는 로컬 폴더를 지운 후 GitHub에서 다시 받아와야 합니다. 로컬 파일들을 위의 GitHub 명령어를 활용하여 서버에 잘 업로드 한 후, 폴더를 삭제합니다. 그 후 SourceTree에 들어가서 새로 만들기 - URL에서 복제를 통해 로컬 폴더에 동기화합니다. ReferencesGithub으로 개인페이지 만들기Hexo+GitHub pagesHexo 기본 사용법","categories":[],"tags":[]},{"title":"GitHub Pages 란?","slug":"GitHub-Pages-란","date":"2018-01-12T01:36:41.000Z","updated":"2018-01-12T01:36:41.768Z","comments":true,"path":"2018/01/12/GitHub-Pages-란/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/01/12/GitHub-Pages-란/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"testpost","slug":"testpost","date":"2018-01-11T17:56:45.000Z","updated":"2018-01-12T01:03:07.265Z","comments":true,"path":"2018/01/12/testpost/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/01/12/testpost/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-01-11T17:49:38.500Z","updated":"2018-01-11T17:49:38.500Z","comments":true,"path":"2018/01/12/hello-world/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/01/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}