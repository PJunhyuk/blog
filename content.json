{"meta":{"title":"PJunhyuk-blog","subtitle":"박준혁의 개발 블로그","description":null,"author":"PJunhyuk","url":"https://PJunhyuk.github.io/blog"},"pages":[],"posts":[{"title":"vue.js + express 로 login 페이지 만들어보기","slug":"vue-js-express-로-login-페이지-만들어보기","date":"2018-05-06T18:23:47.000Z","updated":"2018-05-07T11:01:32.258Z","comments":true,"path":"2018/05/07/vue-js-express-로-login-페이지-만들어보기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/05/07/vue-js-express-로-login-페이지-만들어보기/","excerpt":"","text":"먼저 express-generator와 vue-cli를 설치합시다. $ sudo npm install express-generator -g$ sudo npm install -g vue-cli 1234$ express --view=ejs backend$ cd backend$ npm install$ DEBUG=backend:* npm start $ npm install 을 하였을 때 사소한 에러(write after end 에러)가 발생하여 $ npm install -g npm@5.6.0 를 통해 npm의 버전을 낮춰주었습니다(기존엔 6.0.0). 이제 http://localhost:3000 에 들어가면 실행을 확인할 수 있습니다. 이제 vue를 적용해봅시다. 프롬프트가 나올 때는 그냥 쭉 엔터를 입력합니다. 123$ vue init webpack frontend$ cd frontend$ npm install 추가 설정이 없을 때는 http://localhost:8080 에서 이를 확인할 수 있습니다. 이제 Vue와 express를 연결해봅시다. /frontend/config/index.js의 index 부분과 assetsRoot 를 express 쪽으로 변경해줘야 합니다. 12345...index: path.resolve(__dirname, &apos;../../backend/public/index.html&apos;),...assetsRoot: path.resolve(__dirname, &apos;../../backend/public&apos;),... 그 다음 frontend 에서 $ npm run build 를 진행해주면, build가 완료됩니다. 그러면 /backend/public/index.html 파일이 생기고, 이제 이를 routes와 연결해야 합니다. /backend/routes/index.js를 다음과 같이 수정합니다. 123456789var express = require(&apos;express&apos;);var path = require(&apos;path&apos;);var router = express.Router();router.get(&apos;/&apos;, function (req, res, next) &#123; res.sendFile(path.join(__dirname, &apos;../public&apos;, &apos;index.html&apos;))&#125;);module.exports = router; 이제 다시 서버를 실행하면 http://localhost:3000 에서도 vue를 확인할 수 있습니다.뒤에 나와 있는 #를 삭제하는 것은 밑의 Reference 를 참고합니다. mongodbmongodb, mongoose 부터 설치합시다. 12$ sudo brew install monogodb$ sudo npm install -g mongoose db를 만들고 실행합시다. 12$ mkdir db$ mongod --dbpath ./db 1$ npm install --save axios Reference[Node.js] express와 vue.js 환경설정","categories":[],"tags":[]},{"title":"어떤 딥러닝 프레임워크를 써볼까? 00_인트로","slug":"어떤-딥러닝-프레임워크를-써볼까-00_인트로","date":"2018-04-18T10:21:31.000Z","updated":"2018-04-18T14:27:19.386Z","comments":true,"path":"2018/04/18/어떤-딥러닝-프레임워크를-써볼까-00_인트로/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/04/18/어떤-딥러닝-프레임워크를-써볼까-00_인트로/","excerpt":"","text":"INTRO‘인생은 선택의 연속이다’라는 격언은 괜히 있는 말이 아닙니다. 우리는 언제나 정말 다양한 상황에 놓이고, 그럴 때마다 무엇인가를 선택해야 합니다. 이는 거창한 상황이 아닌 프로그래밍의 사소한 부분에 있어서도 마찬가지입니다. 여러 사람이 (비교적) 쉽게 접근하고 무엇인가를 만들어 낼 수 있는 프로그래밍의 특성 상, 하나의 테마에 대해서도 서로 다른 여러가지 선택지가 존재하는 경우가 많습니다. 때문에 프로그래머는 텍스트 에디터로는 무엇을 사용할지부터 시작해서 어떤 프로그래밍 언어를 사용할지까지, 늘 상황과 취향에 맞춰 무엇인가를 선택해야 합니다. 딥러닝 프레임워크도 마찬가지입니다. 딥러닝이 주목받기 시작하면서, 그 개발을 도와주는 여러 프레임워크들이 등장하였습니다. 이들은 저마다의 특색을 갖고 있죠. 딥러닝 프로그래밍을 처음 시작하는 사람이라면, 이들 중 어떤 프레임워크를 사용할지 정하는 것이 가장 먼저 해야 할 일일 것입니다. 본 어떤 딥러닝 프레임워크를 써볼까? 프로젝트의 목적은 여러 딥러닝 프레임워크를 수박 겉핥기 식으로 살펴보는 것입니다. 단순히 그들이 구현되어 있는 언어나 사용성을 떠나, 각 프레임워크의 구성과 특징을 전체적으로 살펴보아 그들의 장단점을 알아내는 것이 그 목적입니다. RPG 게임에서 직업을 선택할 때 그 직업의 스킬 트리와 공략을 살펴보듯, 본 문서가딥러닝 프레임워크를 선택하는데 도움이 되기를 바랍니다. “ 물론 현실은 그 무엇보다 친한 선배/친구가 사용하는 프레임워크를 사용하는 것이 최고입니다. “ 프레임워크(framework) 란?앞에서 프레임워크 라는 말을 반복적으로 사용하였습니다. 무슨 뜻이길래 이렇게 반복해서 사용한 것일까요? Design Pattern을 창시한 GoF의 한 명이자, 프레임워크 설계의 대가 Ralph E. Johnson 교수는, Components, Frameworks, Patterns 에서 프레임워크를 다음과 같이 정의했습니다. &quot; A framework is a reusable design of all or part of a system that is represented by a set of abstract classes and the way their instances interact &quot; &quot; A framework is the skeleton of an application that can be customized by an application developer &quot; 즉, 사용자가 원하는 기능 구현에만 집중할 수 있도록 기본적인 기능이 구현되어 있는 틀을 뜻합니다. 비슷하게 사용되곤 하는 라이브러리(library)는 반복되는 코드 작성을 피하기 위해 재사용이 가능한 기능을 구현해놓은 것을 말합니다. 프레임워크는 틀 그 자체이며, 라이브러리는 그를 구성하는 것의 일부라고 생각하는 것이 좋을 것 같습니다. 결국, 딥러닝에 사용되는 기능은 상황에 따라 크게 차이나지 않습니다. 때문에 각 딥러닝 프로젝트에 도움을 주기 위해, 기본적인 부분들이 구현되어 있는 프레임워크를 제공하는 것입니다. 그러나 프로젝트에는 여러가지 상황과 조건이 존재하며, 그렇기 때문에 하나의 프레임워크로 모두를 커버할 수 없어 다양한 프레임워크가 생겨났다고 생각하는 것이 좋을 것 같습니다. - 뭐 근데 사실 프레임워크와 라이브러리의 명확한 구분은 모호한 것 같습니다. 대표적인 딥러닝 프레임워크인 TensorFlow 의 홈페이지를 보면, TensorFlow 를 다음과 같이 설명하고 있습니다. &quot; An open source machine learning framework for everyone &quot; &quot; TensorFlow™ is an open source software library for high performance numerical computation. &quot; 정의에 프레임워크와 라이브러리가 중복으로 등장합니다. 애초에 둘 간의 구분이 명확하지 않음을 알 수 있습니다. 그냥 그 정의를 이해하고 넘어가면 될 것 같습니다. 비교그렇다면 본격적으로 딥러닝 프레임워크들을 알아봅시다! 정말 많은 프레임워크들이 있겠지만, 주로 사용되는, 혹은 주로 언급되는 프레임워크를 조금만 꼽아보자면 TensorFlow, Keras, Caffe, PyTorch, DL4J, Theano, Torch 등이 있습니다. 인기(Popularity)얼마나 많은 사람들이 그 프레임워크를 사용하는가는 정말 중요한 요소입니다. 저는 이를 체크하는데 2가지 요소를 사용하였습니다. Google Trends 와 GitHub 가 그것입니다. 먼저 Google Trends 부터 확인할까요? (제 기준에서) 가장 대표적인 5개의 딥러닝 프레임워크 - TensorFlow, PyTorch, Keras, Caffe, Torch - 들을 확인해보았습니다. Python TensorFlow References프레임워크[개발용어] 라이브러리, 프레임워크, 아키텍처, 플래폼이란? Components, Frameworks, Patterns - Ralph E. Johnson Ralph Johnson의 Evolving Frameworks","categories":[],"tags":[]},{"title":"윈도우10 HOME 에 Docker 설치하기","slug":"윈도우10 HOME 에 Docker 설치하기","date":"2018-04-18T07:54:42.000Z","updated":"2018-04-18T10:00:37.849Z","comments":true,"path":"2018/04/18/윈도우10 HOME 에 Docker 설치하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/04/18/윈도우10 HOME 에 Docker 설치하기/","excerpt":"","text":"윈도우10 HOME 에 Docker 를 설치해봅시다. Docker 에서 공식적으로 제공하는 윈도우10 용 클라이언트를 사용하기 위해서는 윈도우의 버전이 PRO 이상이어야 합니다. 그래야 HYPER-V를 사용할 수 있기 때문입니다. 저도 원래 이거 때문에 윈도우10 PRO 버전을 사용하였었지만, 이번에 새로 산 컴퓨터는 윈도우10 HOME 버전이더라구요. 윈도우 버전을 업그레이드할까, 다른 방법을 찾아볼까 하다가 후자를 선택하기로 했습니다. 윈도우10 HOME을 위한 Docker 는 Docker Toolbox를 통해 다운로드 받으실 수 있습니다. 자세한 설치는 Windows 10 Home에서 Docker 설치 하기에 아주 잘 나와있습니다! 저는 추가로 Kitematic을 사용합니다. Docker를 통해 받은 이미지들을 관리할 수 있는 GUI 툴이라고 생각하면 될 것 같습니다. 뭐 여하튼, cmd 창에 $ docker 명령어를 입력하였을 때 정상적으로 실행된다면 설치가 완료된 것입니다. ReferencesWindows 10 Home에서 Docker 설치 하기","categories":[],"tags":[]},{"title":"어떤 딥러닝 프레임워크를 써볼까? 01_텐서플로우","slug":"어떤-딥러닝-프레임워크를-써볼까-01.텐서플로우","date":"2018-04-17T03:10:49.000Z","updated":"2018-04-18T11:11:39.367Z","comments":true,"path":"2018/04/17/어떤-딥러닝-프레임워크를-써볼까-01.텐서플로우/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/04/17/어떤-딥러닝-프레임워크를-써볼까-01.텐서플로우/","excerpt":"","text":"INTROReferencesTensorFlow 한글 문서","categories":[],"tags":[]},{"title":"docker contaniner에 개발환경 세팅하기","slug":"docker-contaniner에-개발환경-세팅하기","date":"2018-04-13T05:28:55.000Z","updated":"2018-04-13T14:12:42.882Z","comments":true,"path":"2018/04/13/docker-contaniner에-개발환경-세팅하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/04/13/docker-contaniner에-개발환경-세팅하기/","excerpt":"","text":"docker로 만든 container에 개발환경을 세팅해봅시다. Tested EnvironmentsImage tensorflow/tensorflow:latest-gpu-py3 Git설치1# apt-get update 먼저 apt-get을 업데이트합니다. 1# apt-get install git 확인1# git --version git version 2.7.4 설정123# git config --global user.name &apos;&#123;유저명&#125;&apos;# git config --global user.email &#123;유저이메일&#125;# git config --list 클론1# git clone &#123;repo주소&#125; Python dependenciescv2 ImportError: No module named ‘cv2’ 해결 linux에 python-opencv를 설치하는 것은 몹시 귀찮은 일입니다ㅠㅠ 다음의 링크를 참조합시다.Install OpenCV3 on Ubuntu pip (upgrade) You are using pip version 9.0.1, however version 9.0.3 is available. 해결 1# pip install --upgrade pip CUDACUDA12# apt-get install wget# wget https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.85_387.26_linux ReferencesUbuntu 16 CUDA Toolkit 8.0 설치","categories":[],"tags":[]},{"title":"docker 이용하여 가상환경 세팅하기","slug":"docker-이용하여-가상환경-세팅하기","date":"2018-04-13T05:02:58.000Z","updated":"2018-04-13T05:28:29.819Z","comments":true,"path":"2018/04/13/docker-이용하여-가상환경-세팅하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/04/13/docker-이용하여-가상환경-세팅하기/","excerpt":"","text":"Docker은 제가 본 소프트웨어 중 가장 인상적인 것 중 하나입니다. 이에 대한 자세한 설명은 언젠가 기회가 될 때 하겠습니다. 이번에는 Docker를 통해 가상환경을 세팅해보도록 하겠습니다. 저는 tensorflow 가상환경을 세팅할 것입니다. 그러면 먼저 그 이미지를 받아야 합니다. 1$ nvidia-docker pull &#123;유저명/이미지명:태그명&#125; $ nvidia-docker pull tensorflow/tensorflow:latest-gpu-py3 GPU를 사용하기 위해 docker 대신 nvidia-docker 명령어를 사용합니다. $ docker images 명령어를 통해 지금까지 받은 모든 image들을 확인할 수 있습니다. 이제 image를 받았으니 그를 실행시켜 container로 만들어야 합니다. 1$ nvidia-docker run -it --name &#123;container명&#125; &#123;유저명/이미지명:태그명&#125; &#123;기본명령어&#125; $ nvidia-docker run -it --name jgravity_HAR_1 tensorflow/tensorflow:latest-gpu-py3 /bin/bash 마지막에 /bin/bash 를 추가한 이유는, 그러지 않으면 jupyter notebooks로 실행되기 때문입니다. 저는 그냥 bash 명령어 창을 원하므로, 이렇게 설정하였습니다. 그러면 터미널 앞의 명령어가 바뀌는 것을 통해 container에 접속했음을 확인할 수 있습니다! 이제 container 에 나왔다가 다시 접속해봅시다! Ctrl+D를 통해 현재 container에서 나올 수 있습니다. $ nvidia-docker ps 명령어를 통해 현재 구현되어 있는 모든 container를 확인할 수 있습니다. 1$ nvidia-docker rm &#123;container명&#125; container 삭제 1$ nvidia-docker start &#123;container명&#125; container 시작 1$ nvidia-docker attach &#123;container명&#125; container 접근 그러므로, start - attach 명령어를 차례로 사용함으로써 해당 container에 접근할 수 있습니다. 이제 docker을 이용하여 가상환경 세팅을 완료하였습니다! 신나게 코딩을 해봅시다:)","categories":[],"tags":[]},{"title":"LINUX 작업환경 세팅하기","slug":"LINUX-작업환경-세팅하기","date":"2018-04-13T02:01:12.000Z","updated":"2018-04-13T04:55:49.177Z","comments":true,"path":"2018/04/13/LINUX-작업환경-세팅하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/04/13/LINUX-작업환경-세팅하기/","excerpt":"","text":"LINUX에 작업환경을 세팅해봅시다! 환경 체크(환경에 따라 명령어에 조금의 차이가 있을 수 있습니다.) Linux version$ cat /etc/*-release | uniq CPU$ lshw -class processor GPU (only for NVIDIA)$ nvidia-smi GPU$ lshw -C display Tested environments Linux version: Linux Mint 18.3 (Sylvia) / ubuntu CPU: Intel(R) Xeon(R) CPU E5-2687W v3 @ 3.10GHz 2개 GPU: Tesla K80 8개 Git저는 코드는 메인 작업환경(맥이나 윈도우)에서 작성하고, 이를 실행하는 용도로만 Linux를 활용합니다. 이를 위해 코드를 옮기는 것은 Git을 사용하므로, 가장 먼저 해야 할 일은 Git을 설치하는 일입니다.Linux에는 기본적으로 Git이 설치되어 있는 것 같습니다. 그러면 설치는 생략하고, 기본 세팅을 진행합시다. $ git config --list 현재 설정을 확인합니다. 12$ git config --global user.name &quot;&#123;사용자 이름&#125;&quot; $ git config --global user.email jgravity@naver.com 사용자의 이름과 이메일을 세팅합니다. 이제는 본격적으로 repo를 clone하여 작업을 진행해봅시다. 1$ git clone &#123;repo 주소&#125; 이제 clone이 완료되었습니다! Dependencies코드를 실행하려고 봤더니, 다음과 같은 에러 메세지가 뜨는 것을 확인할 수 있었습니다. 1&gt; ImportError: No module error numpy numpy module이 없다는 뜻이네요. 설치해줍시다. 저는 python3 을 사용할 것이라 pip3을 사용하였습니다. 1$ pip3 install numpy numpy module이 설치되었습니다! 이런 식으로 세팅을 해나가면 됩니다. References리눅스 종류 확인, 리눅스 버전 확인8 commands to check cpu information on LinuxHow to get the GPU info?.5 시작하기 - Git 최초 설정","categories":[],"tags":[]},{"title":"anaconda 를 통해 python 2, 3 환경 모두 관리하기","slug":"anaconda-를-통해-python-2-3-환경-모두-관리하기","date":"2018-03-05T08:07:46.000Z","updated":"2018-03-05T08:08:35.012Z","comments":true,"path":"2018/03/05/anaconda-를-통해-python-2-3-환경-모두-관리하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/03/05/anaconda-를-통해-python-2-3-환경-모두-관리하기/","excerpt":"","text":"python 2.7 실행anaconda는 여러 version의 python을 관리할 수 있게 해주는 툴입니다. python을 사용하다보면, 기본적으로 설치된 python 이외에 다른 version의 python을 사용해야 할 경우가 꽤 있습니다. 예를 들어, 제가 최근 보고 있는 charades-algorithms 코드 역시 python 2.7 version에서 구현되었습니다. 이를 활용하기 위해서는, anaconda를 사용하여 다른 version의 python 환경을 생성하고, 그에 접근해야 합니다. 먼저, 윈도우 프롬포트에서 conda 명령어를 바로 사용하기 위해, 환경변수의 Path에 conda의 경로를 넣어줍시다. 환경변수의 Path는 내 PC &gt; 우클릭 &gt; 속성 &gt; 고급 시스템 설정 &gt; 환경 변수 &gt; 시스템 변수 &gt; Path &gt; 편집 &gt; 새로 만들기 에서 추가할 수 있으며, 저의 경우에는 C:\\Users\\MCML-PJunhyuk-LabDT\\Anaconda3\\Scripts가 그 경로였습니다. 그 다음, 윈도우 프롬포트를 실행하여 다음의 명령어를 입력합니다. 1&gt; conda create -n py27 python=2.7 anaconda conda를 이용하여 새로운 환경을 생성하며, 그 이름은 py27, python 버전은 2.7이라는 것을 의미합니다. 이렇게 생성한 환경의 리스트는 다음의 명령어로 확인할 수 있습니다. 1&gt; conda info --envs 이제는 생성한 Python 2.7 환경을 사용해봅시다. 먼저 Anaconda Prompt 를 실행합니다. 커맨드 라인 앞의 괄호 안에 들어 있는 것이 현재 활성화된 환경입니다.앞서 제작한 환경의 이름이 py27이었으므로, 다음의 명령어를 통해 그 환경에 접근합니다. 12(base) &gt; conda activate py27(py27) &gt; 그러면 괄호 안이 py27로 바뀌는 것을 확인하실 수 있습니다. 다음의 명령어를 통해 해당 환경의 python version을 확인해봅시다. 12(py27) &gt; python --versionPython 2.7.14 :: Anaconda. Inc. 우리가 원하는대로 실행되었습니다! References파이썬 아나콘다 Python3, Python2 동시 설치(다중 커널) :)Anaconda 설치하기 - Python을 제대로 활용해보자","categories":[],"tags":[]},{"title":"윈도우10에 pytorch 설치하기","slug":"윈도우10에-pytorch-설치하기","date":"2018-03-05T05:16:21.000Z","updated":"2018-03-05T08:08:42.153Z","comments":true,"path":"2018/03/05/윈도우10에-pytorch-설치하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/03/05/윈도우10에-pytorch-설치하기/","excerpt":"","text":"윈도우에 pytorch를 설치해봅시다! pytorch 란?pytorch는 머신러닝 프레임워크 중 하나입니다. python 형식입니다. pytorch 윈도우 설치pytorch는 공식적으로 linux와 macOS 환경만 지원하기 때문에, 윈도우에 설치하기 위해서는 anaconda와, 어떤 개발자가 구현해놓은 것을 사용해야 합니다. anaconda prompt를 관리자 권한으로 실행시켜, 다음의 명령어를 입력합니다. 1(base) &gt; conda install -c peterjc123 pytorch 그러면 pytorch가 설치됩니다. 확인pytorch가 정상적으로 설치되었는지, 그리고 CUDA를 통해 GPU를 사용할 수 있는지를 체크하기 위해서는 다음의 명령어를 anaconda prompt에 실행해봅니다. 12345678910(base) &gt; python&gt;&gt;&gt; import torch&gt;&gt;&gt; torch.cuda.current_device()0&gt;&gt;&gt; torch.cuda.device(0)&lt;torch.cuda.device at 0x000002299E83B780&gt;&gt;&gt;&gt; torch.cuda.device_count()1&gt;&gt;&gt; torch.cuda.get_device_name(0)&apos;GeForce GTX 1080 Ti&apos; 정상적으로 GPU가 detect 된 모습을 확인할 수 있습니다! References윈도우 10 PyTorch 환경 구성 - 설치How to check your pytorch / keras is using the GPU?","categories":[],"tags":[]},{"title":"윈도우에서 쉘 스크립트 사용하기","slug":"윈도우에서-쉘-스크립트-사용하기","date":"2018-02-14T09:43:10.000Z","updated":"2018-03-05T05:14:16.137Z","comments":true,"path":"2018/02/14/윈도우에서-쉘-스크립트-사용하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/02/14/윈도우에서-쉘-스크립트-사용하기/","excerpt":"","text":"윈도우에서 쉘 스크립트를 사용해봅시다! 원래 윈도우 터미널에서는 bash 명령어가 적용되지 않았습니다. 이는 맥북을 주로 쓰고, linux에서 코드를 돌리는 저에겐 굉장히 불편했는데요!(비교적 최근에) 윈도우에서도 bash 를 사용할 수 있는 WSL이 나왔다고 합니다.WSL을 설치하면 윈도우 터미널에서 bash 명령어를 입력하여 bash 명령어가 입력 가능한 창으로 들어가게 됩니다. 다만, 아직 WSL에서 윈도우의 GPU에 접근하는게 불가능하다고 합니다.때문에 굉장히 기본적인 명령어들, 예를 들어 data나 model을 다운로드 받는 스크립트 정도만 WSL로 돌리고, 나머지는 그냥 윈도우에서 돌리는 방식으로 작업 방식을 구축하기로 하였습니다. 먼저, WSL은 검색을 통해 설치할 수 있습니다. 제가 참고한 블로그는 다음과 같습니다. [Windows 10/윈도우 10] WSL Windows 10 Bash 사용하기(lxrun) 그 다음 터미널에서 &gt; bash 를 입력하면 WSL에 접근할 수 있습니다. 기본적인 Python 코드를 사용하기 위해, python과 python3, pip를 설치해주었습니다. 12345&gt; bash$ sudo apt-get update$ sudo apt-get install python3$ sudo apt-get install python$ sudo apt-get install python-pip 예시: DALY dataset 다운로드","categories":[],"tags":[]},{"title":"윈도우10에 tensorflow-gpu 작업 환경 세팅하기","slug":"윈도우10에-tensorflow-gpu-작업-환경-세팅하기","date":"2018-02-07T04:36:45.000Z","updated":"2018-02-07T05:27:01.184Z","comments":true,"path":"2018/02/07/윈도우10에-tensorflow-gpu-작업-환경-세팅하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/02/07/윈도우10에-tensorflow-gpu-작업-환경-세팅하기/","excerpt":"","text":"윈도우10 컴퓨터에 tensorflow-gpu 를 설치해봅시다. CUDA Toolkit 9.0 + cuDNN 7.0.5 + Python 3.6.4 + TensorFlow 1.5.0 Environment: Windows 10 Home + Inter(R) Core(TM) i7-8700K CPU @ 3.70GHz 3.70 GHz + NVIDIA GeForce GTX 1080 Ti CUDA Toolkit 9.0 설치현재(2018년 2월 7일) 기준 CUDA Toolkit의 가장 최신 버전은 9.1입니다. 그러나 테스트해보니 latest version의 tensorflow가 CUDA Toolkit 9.1을 지원하지 않는 것 같아, 9.1을 설치했다가 삭제 후 9.0을 설치하였습니다ㅠㅠ삭제는 그냥 제어판에서 NVIDIA가 들어가는 것을 (그래픽카드 드라이버 빼고) 다 날려줬습니다. 중간에 한 번 재시작하라고 하는데, 말을 잘 들어줍시다. 중간에 화면이 이상해지거나, 클릭이 안되는 현상이 발생할 수도 있지만, 무시하고 기다리면 될 것 같습니다. 여튼 설치를 위해, CUDA Toolkit 9.0 설치 페이지에서 Windows - x86-64 - 10 - exe (local) 을 차례로 선택하여 Installer를 다운로드 받습니다.다운로드 후 쭉 클릭하여 설치를 완료해줍니다. 설치 완료 후 cmd 창에 nvcc --version 을 입력하여 정상 설치를 체크해봅니다. 여러 줄이 뜨고, 마지막 줄에 release 9.0 이 뜨면 정상입니다. cuDNN 설치cuDNN Download 페이지에 가면, 여러 버전 중 원하는 것을 선택할 수 있습니다. (로그인이 필요합니다!) CUDA Toolkit을 9.0 버전으로 설치하였으니, Download cuDNN v7.0.5 for CUDA 9.0 을 클릭하고, cuDNN v7.0.5 for Windows 10 을 클릭하여 다운로드 받습니다.다운로드가 완료되면, 압축을 풉니다. 내부에 있는 bin, include, lib 폴더를 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.0 의 경로에 덮어써줍니다. Python 설치Python을 설치해봅시다. Python 공식 홈페이지 에서 다운로드 받으면 됩니다.이 때, 제 컴퓨터는 64비트이고, 32비트의 Python이 돌아가는데 에러가 나서, 64비트의 Python을 설치하였습니다. release에서 원하는 버전을 선택하고, 페이지 하단의 Files에서 Windows x86-64 executable installer 을 다운로드 받아서 설치하면 됩니다.저는 3.6.4 버전을 설치하였습니다. 설치 완료 후 cmd 창에 python --version 을 입력하여 정상 설치를 체크해봅니다. Python 3.6.4라는 내용이 뜨면 정상입니다. tensorflow-gpu 설치Python과 함께 설치된 pip를 활용하여 tensorflow-gpu를 설치해봅시다. cmd 창에서 pip install tensorflow-gpu를 입력하면 설치가 진행됩니다. 설치 완료 후 cmd 창에 다음의 명령어를 통해 정상 작동을 체크해봅니다. 12345678910python&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; hello = tf.constant(&apos;Hello, TF!&apos;)&gt;&gt;&gt; sess = tf.Session()&gt;&gt;&gt; sess.run(hello)b&apos;Hello, TF!&apos;&gt;&gt;&gt; a = tf.constant(10)&gt;&gt;&gt; b = tf.constant(32)&gt;&gt;&gt; sess.run(a + b)42 실행해보니, &gt;&gt;&gt; sess = tf.Session() 명령어 입력 후 조금 텀이 존재하였습니다. 아무튼 위의 명령어들이 잘 작동한다면 제대로 설치된 것입니다! References1-2. 텐서플로우(TensorFlow) GPU버전(Tensorflow-Gpu) 설치하기TensorFlow GPU 설치 (Windows 10, Python 3.6)","categories":[],"tags":[]},{"title":"Hexo에 hueman 테마 적용하기","slug":"Hexo에-hueman-테마-적용하기","date":"2018-01-12T02:24:03.000Z","updated":"2018-01-12T06:44:09.731Z","comments":true,"path":"2018/01/12/Hexo에-hueman-테마-적용하기/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/01/12/Hexo에-hueman-테마-적용하기/","excerpt":"","text":"이번에는 앞서 Hexo로 제작한 GitHub Pages의 Blog에 hueman이라는 플러그인을 적용해봅시다. hueman이란? A redesign of Alx’s wordpress theme hueman, ported to Hexo.Probably the most beautiful theme for Hexo. hueman은 Hexo 기반의 blog theme 입니다. 다음의 링크에서 Preview를 확인해보실 수 있습니다.hueman-preview 설치앞서 Hexo blog를 설치해놓았던 blog 디렉토리에서 다음의 명령어를 입력합니다. Heuman 테마를 clone 하는 과정입니다. 1$ git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman 그 후 blog 폴더의 _config.yml 에서 theme를 landscape가 아닌 hueman으로 수정합니다. 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hueman 다음으로 themes/hueman 폴더에 있는 _config.yml.example 파일의 이름을 _config.yml로 바꿔줍니다.마지막으로 Insight Search 엔진을 사용하기 위해 npm으로 hexo-generator-json-content 패키지를 설치합니다. 1$ npm install -S hexo-generator-json-content 설치가 완료되었습니다! 변경 사항을 다음의 명령어를 통해 GitHub에 업로드합니다. 123$ git add *$ git commit -m &quot;Install hueman&quot;$ git push origin master 재배포테마 설치 완료 후에는 Hexo를 재배포해야 합니다. 123$ hexo clean$ hexo g$ hexo d 처음에는 좀 깨져 보일 수 있는데, (css 로딩이 늦어서 그런 것 같습니다) 한 5분 정도 기다린 후 새로고침하니 잘 되는 것을 확인할 수 있었습니다.끝입니다! 이젠 Hexo의 hueman 테마가 적용된 블로그를 커스터마이징 할 수 있습니다. ReferencesHexo 테마 적용하기Hexo 추천 테마, Hueman 적용하기","categories":[],"tags":[]},{"title":"Hexo로 GitHub Pages에 Blog 설치","slug":"Hexo로-GitHub-Pages에-Blog-설치","date":"2018-01-12T01:36:54.000Z","updated":"2018-01-12T06:50:30.962Z","comments":true,"path":"2018/01/12/Hexo로-GitHub-Pages에-Blog-설치/","link":"","permalink":"https://PJunhyuk.github.io/blog/2018/01/12/Hexo로-GitHub-Pages에-Blog-설치/","excerpt":"","text":"GitHub Pages에 Hexo를 설치해봅시다. Hexo란?Hexo는 Node.js 기반의 블로그 프레임워크입니다. Hexo 공식 소개를 살펴보면 Hexo가 무엇인지 쉽게 알 수 있습니다. Hexo is a fast, simple &amp; powerful blog framework powered by Node.js. DependenciesNode.js &amp; npmHexo를 설치하기 위해서는 Node.js가 설치되어야 있어야 합니다.맥에 Node.js를 설치하는 방법은 여러 가지가 있습니다. 가장 쉬운 방법은 Node.js 사이트에서 공식 설치 파일을 받는 것이지만, 이는 다음과 같은 문제가 있다고 합니다. 관리자 권한 없이 제대로 실행되지 않음. Node.js의 여러 버전을 관리할 수 없어, 서로 다른 버전을 사용하는 여러 프로젝트를 동시에 테스트하기 어려움. 때문에 homebrew나, nvm(Node Version Manager) 등을 사용하여 Node.js를 설치하곤 합니다.그러나 저는 위의 두 방법 모두 이상한 에러가 떠서, 기존 파일을 모두 삭제 후 공식 설치 파일을 통해 설치를 진행하였습니다ㅎㅎ;공식 설치 파일을 사용하여 Node.js와 npm을 모두 설치해줍시다. ReferencesMac에서 Node.js 설치하기 ETC손쉬운 설치를 위해 hexo 관련 몇몇 npm 패키지를 설치하여야 합니다. 1$ npm install hexo-cli -g 설치Hexo 설치Hexo를 사용하여 개인/팀 블로그를 설치해보도록 하겠습니다. 원하는 그림은 https://&lt;개인/팀계정&gt;.github.io/blog 에 Hexo blog가 설치되는 것입니다.workspace 폴더에서 다음의 명령어를 실행합니다. 1$ hexo init blog 그러면 폴더 내부에 blog라는 폴더가 생성됩니다. node modules 설치를 진행합니다. 12$ cd blog$ npm install 기본적인 Hexo 설치가 완료되었습니다! GitHub 세팅GitHub Pages 사용을 위해서는 위에서 사용한 개인/팀의 계정에 blog라는 repository를 만들어야 합니다. GitHub 사이트에 접속하여 New를 누르고, blog라는 이름의 repository를 만들어줍시다. 이 때 README.md나 .gitignore과 같은 파일은 생성하지 않습니다.이제 앞서 설치해놓은 Hexo를 GitHub repository에 업로드해야합니다. blog 폴더로 이동하여 다음의 명령어를 입력합니다. 12345$ git init$ git remote add origin https://github.com/virus-lab/blog.git$ git add *$ git commit -m &quot;Initiate Hexo&quot;$ git push origin master GitHub의 repository로 이동하면 잘 업로드 된 것을 확인할 수 있습니다. 웹 상에서 dependencies 에러 메세지가 나오면 Dismiss - Risk is tolerable to this project 를 선택합시다. 배포 준비GitHub Pages에 배포하기 위해 blog 디렉토리의 _config.yml 파일을 수정합니다.위의 URL 부분은 다음과 같이 수정합니다. 123456# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://&lt;개인/팀계정&gt;.github.io/blogroot: /blog/permalink: :year/:month/:day/:title/permalink_defaults: 아래 Deployment 부분은 다음과 같이 추가 및 수정합니다. 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/&lt;개인/팀계정&gt;/blog.git branch: gh-pages 배포먼저 다음의 명령어를 통해 deployment(배포) 패키지를 설치합니다. 1$ npm install hexo-deployer-git --save 다음의 명령어를 통해 repository를 clean 한 후 배포합니다. g와 d는 각각 generate와 deploy의 약자입니다. 123$ hexo clean$ hexo g$ hexo d 끝입니다!GitHub 웹의 repository에서 branch를 gh-pages로 수정한 후 보면 방금 한 것들이 commit 되어 있는 것을 확인할 수 있습니다. 이제 https://&lt;개인/팀계정&gt;.github.io/blog 의 링크에 블로그가 설치된 것을 확인하실 수 있습니다! GitHub 재업로드설치가 완료되었습니다! 변경 사항을 다음의 명령어를 통해 GitHub에 업로드합니다. 123$ git add *$ git commit -m &quot;Install hueman&quot;$ git push origin master SourceTree 적용SourceTree를 사용하여 Hexo 프로젝트를 관리하기 위해서는 로컬 폴더를 지운 후 GitHub에서 다시 받아와야 합니다. 로컬 파일들을 위의 GitHub 명령어를 활용하여 서버에 잘 업로드 한 후, 폴더를 삭제합니다. 그 후 SourceTree에 들어가서 새로 만들기 - URL에서 복제를 통해 로컬 폴더에 동기화합니다. ReferencesGithub으로 개인페이지 만들기Hexo+GitHub pagesHexo 기본 사용법","categories":[],"tags":[]}]}